using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using UnityEngine.UI;

public class ClickerManager : MonoBehaviour
{
    /*
     * @author Kate Howell
     * @version 12.4.2019
     * 
     * This class encompasses all of the managment needed for a specifically themed clicker. The vaiable names can be changed ot match any theme. 
     * There is functionality implemented to change the prices of items as the quainty owned increases. 
     * This clicker class encompasses both click based income and idle income. 
     * Purchasables are hidden until the player has enough current gold to purchase the item. Then they are unlocked for the rest of the prestige. 
     * Currently no limits on how many mutpliers can be bought. Generators can only be bought until companySpaceMax is reached
     */

    public float gold = 0; //set starting value of gold



    //inital values of all the generators
    public int CryingBabies = 0; //click based generator
    public int GoodBabies = 0; //idle generator
    public int Pacifiers = 0; //changes a crying baby generator into a good baby generator, switching from click income to idle income
    public int Pencil = 0; //secretary baby
    public int Clipboards = 0;
    public int Suits = 0;
    public int Phones = 0;
    public int Computers = 0;
    public int Money = 0;
    public int Flags = 0;
    public int Crosses = 0;
    public int Halos = 0;
    public int Beards = 0;
    public int Horns = 0;
    public int Tails = 0;

    public int BabyFactories = 0;
    public int PacifierFactories = 0;

    public int TotalPacifiers = 0;
    public int TotalCryingBabies = 0;



    //income Amount of each generator
    private int cryingBabyIncome = 1;
    private int GoodBabiesIncome = 10; 
    private int PencilIncome = 20; 
    private int ClipboardsIncome = 40;
    private int SuitsIncome = 100;
    private int PhonesIncome = 250;
    private int ComputersIncome = 500;
    private int MoneyIncome = 1000;
    private int FlagsIncome = 2000;
    private int CrossesIncome = 4000;
    private int HalosIncome = 8000;
    private int BeardsIncome = 16000;
    private int HornsIncome = 32000;
    private int TailsIncome = 66600;

    private int BabyFactoryRate = 0;
    private int PacifierFactoryRate = 0;

    //private current income vaiables
    private int currentClickIncome; //income generated when a crying baby is clicked
    private int currentIdleIncome; //income generated by all other generators

    //current price of each generator/Multiplier , with the ability to increase the price as quanity increases 
    private int _priceCryingBaby = 10;
    private int _pricePacifier = 100;
    private int _pricePencil = 250;
    private int _priceClipboard = 500;
    private int _priceSuit = 1000;
    private int _pricePhone = 5000;
    private int _priceComputer = 10000;
    private int _priceMoney = 25000;
    private int _priceFlag = 50000;
    private int _priceCross = 100000;
    private int _priceHalo = 150000;
    private int _priceBeard = 250000;
    private int _priceHorn = 500000;
    private int _priceTail = 1000000;
    private int _priceBabyFactory = 750;
    private int _pricePacifierFactory = 75000;

    private int _priceBabyPencil = 5;
    private int _priceBabyClipboard = 10;
    private int _priceBabySuit = 15;
    private int _priceBabyPhone = 20;
    private int _priceBabyComputer = 30;
    private int _priceBabyMoney = 40;
    private int _priceBabyFlag = 50;
    private int _priceBabyCross = 100;
    private int _priceBabyHalo = 150;
    private int _priceBabyBeard = 200;
    private int _priceBabyHorn = 250;
    private int _priceBabyTail = 500;
 
    private int _priceCryingBabyStart = 10;
    private int _pricePacifierStart = 100;
    private int _pricePencilStart = 250;
    private int _priceClipboardStart = 500;
    private int _priceSuitStart = 1000;
    private int _pricePhoneStart = 5000;
    private int _priceComputerStart = 10000;
    private int _priceMoneyStart = 25000;
    private int _priceFlagStart = 50000;
    private int _priceCrossStart = 100000;
    private int _priceHaloStart = 150000;
    private int _priceBeardStart = 250000;
    private int _priceHornStart = 500000;
    private int _priceTailStart = 1000000;
    private int _priceBabyFactoryStart = 750;
    private int _pricePacifierFactoryStart = 750000;

    //ui manamagment
    public TextMeshProUGUI goldText; //where current gold is diplayed 

    //where the price of each purchasable is shown 
    public TextMeshProUGUI priceCryingBaby;
    public TextMeshProUGUI pricePacifier;
    public TextMeshProUGUI pricePencil;
    public TextMeshProUGUI priceClipboard;
    public TextMeshProUGUI priceSuit;
    public TextMeshProUGUI pricePhone;
    public TextMeshProUGUI priceComputer;
    public TextMeshProUGUI priceMoney;
    public TextMeshProUGUI priceFlag;
    public TextMeshProUGUI priceCross;
    public TextMeshProUGUI priceHalo;
    public TextMeshProUGUI priceBeard;
    public TextMeshProUGUI priceHorn;
    public TextMeshProUGUI priceTail;
    public TextMeshProUGUI priceBabyFactory;
    public TextMeshProUGUI pricePacifierFactory;

    //where the amount of each purchasable is shown
    public TextMeshProUGUI amountCryingBabies;
    public TextMeshProUGUI amountGoodBabies;
    public TextMeshProUGUI amountPacifiers;
    public TextMeshProUGUI amountPencils;
    public TextMeshProUGUI amountClipboards;
    public TextMeshProUGUI amountSuits;
    public TextMeshProUGUI amountPhones;
    public TextMeshProUGUI amountComputers;
    public TextMeshProUGUI amountMoney;
    public TextMeshProUGUI amountFlag;
    public TextMeshProUGUI amountCross;
    public TextMeshProUGUI amountHalo;
    public TextMeshProUGUI amountBeard;
    public TextMeshProUGUI amountHorn;
    public TextMeshProUGUI amountTails;
    public TextMeshProUGUI amountBabyFactory;
    public TextMeshProUGUI amountPacifierFactory;

    //displays the name of each purchasable, implmented so purchasables can be hidden until they are unlocked 
    public TextMeshProUGUI titleGoodBabies;
    public TextMeshProUGUI titlePacifier;
    public TextMeshProUGUI titlePencil;
    public TextMeshProUGUI titleClipboard;
    public TextMeshProUGUI titleSuit;
    public TextMeshProUGUI titlePhone;
    public TextMeshProUGUI titleComputer;
    public TextMeshProUGUI titleMoney;
    public TextMeshProUGUI titleFlag;
    public TextMeshProUGUI titleCross;
    public TextMeshProUGUI titleHalo;
    public TextMeshProUGUI titleBeard;
    public TextMeshProUGUI titleHorn;
    public TextMeshProUGUI titleTail;
    public TextMeshProUGUI titleBabyFactory;
    public TextMeshProUGUI titlePacifierFactory;


    //the button the player click to purcahse each item, implmented so purchasables can be hidden until they are unlocked 
    public GameObject storeButtonPacifier;
    public GameObject storeButtonPencil;
    public GameObject storeButtonClipboard;
    public GameObject storeButtonSuit;
    public GameObject storeButtonPhone;
    public GameObject storeButtonComputer;
    public GameObject storeButtonMoney;
    public GameObject storeButtonFlag;
    public GameObject storeButtonCross;
    public GameObject storeButtonHalo;
    public GameObject storeButtonBeard;
    public GameObject storeButtonHorn;
    public GameObject storeButtonTails;
    public GameObject storeButtonBabyFactory;
    public GameObject storeButtonPacifierFactory;

    //current variables that need to be shown to the player
    public TextMeshProUGUI idleIncome;
    public TextMeshProUGUI clickIncome;

    //each picture assocaited with each purchasable, so they can be hidden until unlocked 
    public Image goodBabyImage;
    public Image pacifierImage;
    public Image pencilImage;
    public Image clipboardImage;
    public Image suitImage;
    public Image phoneImage;
    public Image computerImage;
    public Image moneyImage;
    public Image flagImage;
    public Image crossImage;
    public Image haloImage;
    public Image beardImage;
    public Image hornImage;
    public Image tailImage;

    //unlock management ***not implmented***
    private bool goodBabyUnlocked;
    private bool pacifierUnlocked;
    private bool pencilUnlocked;
    private bool clipboardUnlocked;
    private bool suitUnlocked;
    private bool phoneUnlocked;
    private bool computerUnlocked;
    private bool moneyUnlocked;
    private bool flagUnlocked;
    private bool crossUnlocked;
    private bool haloUnlocked;
    private bool beardUnlocked;
    private bool hornUnlocked;
    private bool tailsUnlocked;
    private bool factory1Unlocked;
    private bool factory2Unlocked;



    // Start is called before the first frame update
    void Start()
    {
        //you start with one crying baby, making your current income 1$ per click
        CryingBabies = 1;
        currentClickIncome = 1;


        //locked items
        LockGoodBaby();
        LockPacifier();
        LockPencil();
        LockClipboard();
        LockSuit();
        LockPhone();
        LockComputer();
        LockMoney();
        LockFlag();
        LockCross();
        LockHalo();
        LockBeard();
        LockHorn();
        LockTail();
        LockBabyFactory();
        LockPacifierFactory();
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        //everyframe update the current UI
        UpdateUI();

        UsePacifiers();

        //every frame calcualte what the current idle income is
        CalculateIncome();

        FactoryIncome();
        
    }

    public void FactoryIncome()
    {
        CryingBabies += BabyFactories * BabyFactoryRate;
        Pacifiers += PacifierFactories * PacifierFactoryRate;
    }

    //this function uses any avialable pacifiers
    public void UsePacifiers()
    {
        if(Pacifiers > 0 && CryingBabies > 0)
        {
            CryingBabies -= 1;
            GoodBabies += 1;
            Pacifiers -= 1;
        }
    }

    //this function is to be called on the crying baby button
    public void Click()
    {
        //click income
        gold += currentClickIncome;
    }
   
    //runs every frame, updates current income variables
    public void CalculateIncome()
    {
        //calculate income
        currentIdleIncome = (GoodBabies * GoodBabiesIncome) + (Pencil * PencilIncome) + (Clipboards * ClipboardsIncome) + (Suits * SuitsIncome)
                                                            + (Phones * PhonesIncome) + (Computers * ComputersIncome) + (Money * MoneyIncome)
                                                            + (Flags * FlagsIncome) + (Crosses * CrossesIncome) + (Halos * HalosIncome)
                                                            + (Beards * BeardsIncome) + (Horns * HornsIncome) + (Tails * TailsIncome);
        currentClickIncome = ToInt(CryingBabies * cryingBabyIncome);

        //add income
        gold += currentIdleIncome * Time.deltaTime;

        int tmp = ToInt(gold);

        //update ui
        goldText.SetText(tmp.ToString() + "$");
        idleIncome.SetText(currentIdleIncome.ToString());
        clickIncome.SetText(currentClickIncome.ToString());
    }


    //runs every frame, sets all UI on screen
    public void UpdateUI()
    {
        //unlock shit
        if(gold > _pricePacifier && !pacifierUnlocked)
        {
            UnlockPacifier();
            pacifierUnlocked = true;
        }

        if(GoodBabies > 0 && !goodBabyUnlocked)
        {
            UnlockGoodBaby();
            goodBabyUnlocked = true;
        }

        if (gold > _pricePencil && !pencilUnlocked)
        {
            UnlockPencil();
            pencilUnlocked = true;
        }

        if (gold > _priceClipboard && !clipboardUnlocked)
        {
            UnlockClipboard();
            clipboardUnlocked = true;
        }

        if (gold > _priceSuit && !suitUnlocked)
        {
            UnlockSuit();
            suitUnlocked = true;
        }

        if (gold > _pricePhone && !phoneUnlocked)
        {
            UnlockPhone();
            phoneUnlocked = true;
        }

        if (gold > _priceComputer && !computerUnlocked)
        {
            UnlockComputer();
            computerUnlocked = true;
        }

        if (gold > _priceMoney && !moneyUnlocked)
        {
            UnlockMoney();
            moneyUnlocked = true;
        }

        if (gold > _priceFlag && !flagUnlocked)
        {
            UnlockFlag();
            flagUnlocked = true;
        }

        if (gold > _priceCross && !crossUnlocked)
        {
            UnlockCross();
            crossUnlocked = true;
        }

        if (gold > _priceHalo && !haloUnlocked)
        {
            UnlockHalo();
            haloUnlocked = true;
        }

        if (gold > _priceBeard && !beardUnlocked)
        {
            UnlockBeard();
            beardUnlocked = true;
        }

        if (gold > _priceHorn && !hornUnlocked)
        {
            UnlockHorn();
            hornUnlocked = true;
        }

        if (gold > _priceTail && !tailsUnlocked)
        {
            UnlockTail();
            tailsUnlocked = true;
        }

        if (gold > _priceBabyFactory && !factory1Unlocked)
        {
            UnlockBabyFactory();
            factory1Unlocked = true;
        }

        if(gold > _pricePacifierFactory && !factory2Unlocked)
        {
            UnlockPacifierFactory();
            factory2Unlocked = true;
        }


        //gold update
        //goldText.SetText(gold.ToString() + "$");

       

        //income values are set in the calcualteIncome function***

        //crying baby values - amount and price
        amountCryingBabies.SetText(CryingBabies.ToString());
        //int _tmpAmount = CryingBabies;
        //_priceCryingBaby = _tmpAmount + 10; //add an actual price calculation here
        priceCryingBaby.SetText("$" + _priceCryingBaby.ToString());

        if (pacifierUnlocked)
        {
            amountPacifiers.SetText(Pacifiers.ToString());
            pricePacifier.SetText(_pricePacifier.ToString());
        }
        //good baby values
        if (goodBabyUnlocked)
        {
            amountGoodBabies.SetText(GoodBabies.ToString());
        }

        if (pencilUnlocked)
        {
            amountPencils.SetText(Pencil.ToString());
            pricePencil.SetText("$" + _pricePencil.ToString());
        }

        if (clipboardUnlocked)
        {
            amountClipboards.SetText(Clipboards.ToString());
            priceClipboard.SetText("$" + _priceClipboard.ToString());
        }

        if (suitUnlocked)
        {
            amountSuits.SetText(Suits.ToString());
            priceSuit.SetText("$" + _priceSuit.ToString());
        }

        if (phoneUnlocked)
        {
            amountPhones.SetText(Phones.ToString());
            pricePhone.SetText("$" + _pricePhone.ToString());
        }

        if (computerUnlocked)
        {
            amountComputers.SetText(Computers.ToString());
            priceComputer.SetText("$" + _priceComputer.ToString());
        }

        if (moneyUnlocked)
        {
            amountMoney.SetText(Money.ToString());
            priceMoney.SetText("$" + _priceMoney.ToString());
        }

        if (flagUnlocked)
        {
            amountFlag.SetText(Flags.ToString());
            priceFlag.SetText("$" + _priceFlag.ToString());
        }

        if (crossUnlocked)
        {
            amountCross.SetText(Crosses.ToString());
            priceCross.SetText("$" + _priceCross.ToString());
        }

        if (haloUnlocked)
        {
            amountHalo.SetText(Halos.ToString());
            priceHalo.SetText("$" + _priceHalo.ToString());
        }

        if (beardUnlocked)
        {
            amountBeard.SetText(Beards.ToString());
            priceBeard.SetText("$" + _priceBeard.ToString());
        }

        if (hornUnlocked)
        {
            amountHorn.SetText(Horns.ToString());
            priceHorn.SetText("$" + _priceHorn.ToString());
        }

        if (tailsUnlocked)
        {
            amountTails.SetText(Tails.ToString());
            priceTail.SetText("$" + _priceTail.ToString());
        }

        if (factory1Unlocked)
        {
            amountBabyFactory.SetText(BabyFactories.ToString());
            priceBabyFactory.SetText(_priceBabyFactory.ToString());
        }

        if (factory2Unlocked)
        {
            amountPacifierFactory.SetText(PacifierFactories.ToString());
            pricePacifierFactory.SetText(_pricePacifierFactory.ToString());
        }



    }


    //this function is to be called on the Purchase button for a crying baby
    public void BuyCryingBaby()
    {
        //if you can afford the price and have enough space
        if (gold >= _priceCryingBaby)
        {
            //get it
            CryingBabies += 1;
            TotalCryingBabies += 1;

            //pay for it
            gold -= _priceCryingBaby;


            _priceCryingBaby = ((TotalCryingBabies + 1) / 2) * _priceCryingBabyStart;
        }
    }

    //this function is to be called on the Purchase button for a pacifier
    public void BuyPacifier()
    {
        //if you can afford the price
        if (gold >= _pricePacifier)
        {
            //get it
            Pacifiers += 1;
            TotalPacifiers += 1;

            //pay for it
            gold -= _pricePacifier;


            _pricePacifier = ((TotalPacifiers + 1) / 2) * _pricePacifierStart;
        }
    }

    //this function is to be called on the Purchase button for a pencil
    public void BuyPencil()
    {
        //if you can afford the price
        if (gold >= _pricePencil && GoodBabies >= _priceBabyPencil)
        {
            //get it
            Pencil += 1;

            //pay for it
            gold -= _pricePencil;
            GoodBabies -= _priceBabyPencil;


            _pricePencil = ((Pencil + 1) / 2) * _pricePencilStart;
        }
    }

    //this function is to be called on the Purchase button for a clipboard
    public void BuyClipboard()
    {
        //if you can afford the price
        if (gold >= _priceClipboard && GoodBabies >= _priceBabyClipboard)
        {
            //get it
            Clipboards += 1;

            //pay for it
            gold -= _priceClipboard;
            GoodBabies -= _priceBabyClipboard;


            _priceClipboard = ((Clipboards + 1) / 2) * _priceClipboardStart;
        }
    }

    //this function is to be called on the Purchase button for a suit
    public void BuySuit()
    {
        //if you can afford the price
        if (gold >= _priceSuit && GoodBabies >= _priceBabySuit)
        {
            //get it
            Suits += 1;

            //pay for it
            gold -= _priceSuit;
            GoodBabies -= _priceBabySuit;


            _priceSuit = ((Suits + 1) / 2) * _priceSuitStart;
        }
    }

    //this function is to be called on the Purchase button for a phone
    public void BuyPhone()
    {
        //if you can afford the price
        if (gold >= _pricePhone && GoodBabies >= _priceBabyPhone)
        {
            //get it
            Phones += 1;

            //pay for it
            gold -= _pricePhone;
            GoodBabies -= _priceBabyPhone;


            _pricePhone = ((Phones + 1) / 2) * _pricePhoneStart;
        }
    }

    //this function is to be called on the Purchase button for a Computer
    public void BuyComputer()
    {
        //if you can afford the price
        if (gold >= _priceComputer && GoodBabies >= _priceBabyComputer)
        {
            //get it
            Computers += 1;

            //pay for it
            gold -= _priceComputer;
            GoodBabies -= _priceBabyComputer;


            _priceComputer = ((Computers + 1) / 2) * _priceComputerStart;
        }
    }

    //this function is to be called on the Purchase button for a money
    public void BuyMoney()
    {
        //if you can afford the price
        if (gold >= _priceMoney && GoodBabies >= _priceBabyMoney)
        {
            //get it
            Money += 1;

            //pay for it
            gold -= _priceMoney;
            GoodBabies -= _priceBabyMoney;


            _priceMoney = ((Money + 1) / 2) * _priceMoneyStart;
        }
    }

    //this function is to be called on the Purchase button for a flag
    public void BuyFlag()
    {
        //if you can afford the price
        if (gold >= _priceFlag && GoodBabies >= _priceBabyFlag)
        {
            //get it
            Flags += 1;

            //pay for it
            gold -= _priceFlag;
            GoodBabies -= _priceBabyFlag;


            _priceFlag = ((Flags + 1) / 2) * _priceFlagStart;
        }
    }

    //this function is to be called on the Purchase button for a cross
    public void BuyCross()
    {
        //if you can afford the price
        if (gold >= _priceCross && GoodBabies >= _priceBabyCross)
        {
            //get it
            Crosses += 1;

            //pay for it
            gold -= _priceCross;
            GoodBabies -= _priceBabyCross;


            _priceCross = ((Crosses + 1) / 2) * _priceCrossStart;
        }
    }

    //this function is to be called on the Purchase button for a halo
    public void BuyHalo()
    {
        //if you can afford the price
        if (gold >= _priceHalo && GoodBabies >= _priceBabyHalo)
        {
            //get it
            Halos += 1;

            //pay for it
            gold -= _priceHalo;
            GoodBabies -= _priceBabyHalo;


            _priceHalo = ((Halos + 1) / 2) * _priceHaloStart;
        }
    }

    //this function is to be called on the Purchase button for a beard
    public void BuyBeard()
    {
        //if you can afford the price
        if (gold >= _priceBeard && GoodBabies >= _priceBabyBeard)
        {
            //get it
            Beards += 1;

            //pay for it
            gold -= _priceBeard;
            GoodBabies -= _priceBabyBeard;


            _priceBeard = ((Beards + 1) / 2) * _priceBeardStart;
        }
    }

    //this function is to be called on the Purchase button for a horn
    public void BuyHorn()
    {
        //if you can afford the price
        if (gold >= _priceHorn && GoodBabies >= _priceBabyHorn)
        {
            //get it
            Horns += 1;

            //pay for it
            gold -= _priceHorn;
            GoodBabies -= _priceBabyHorn;


            _priceHorn = ((Horns + 1) / 2) * _priceHornStart;
        }
    }

    //this function is to be called on the Purchase button for a tail
    public void BuyTail()
    {
        //if you can afford the price
        if (gold >= _priceTail && GoodBabies >= _priceBabyTail)
        {
            //get it
            Tails += 1;

            //pay for it
            gold -= _priceTail;
            GoodBabies -= _priceBabyTail;


            _priceTail = ((Tails + 1) / 2) * _priceTailStart;
        }
    }

    //this function is to be called on the Purchase button for a factory1
    public void BuyFactory1()
    {
        //if you can afford the price
        if (gold >= _priceBabyFactory)
        {
            //get it
            BabyFactories += 1;

            //pay for it
            gold -= _priceBabyFactory;


            _priceBabyFactory = ((BabyFactories + 1) / 2) * _priceBabyFactoryStart;
        }
    }

    //this function is to be called on the Purchase button for a factory2
    public void BuyFactory2()
    {
        //if you can afford the price
        if (gold >= _pricePacifierFactory)
        {
            //get it
            PacifierFactories += 1;

            //pay for it
            gold -= _pricePacifierFactory;


            _pricePacifierFactory = ((PacifierFactories + 1) / 2) * _pricePacifierFactoryStart;
        }
    }

    //activates all GoodBaby items on the ui
    public void UnlockGoodBaby()
    {
        //price, amount, title, button, image
        amountGoodBabies.gameObject.SetActive(true);
        titleGoodBabies.gameObject.SetActive(true);
        goodBabyImage.gameObject.SetActive(true);
    }

    //deactivates all GoodBaby items on the ui
    public void LockGoodBaby()
    {
        //price, amount, title, button, image
        amountGoodBabies.gameObject.SetActive(false);
        titleGoodBabies.gameObject.SetActive(false);
        goodBabyImage.gameObject.SetActive(false);
    }

    //activates all pacifier items on the ui
    public void UnlockPacifier()
    {
        //price, amount, title, button, image
        pricePacifier.gameObject.SetActive(true);
        amountPacifiers.gameObject.SetActive(true);
        titlePacifier.gameObject.SetActive(true);
        storeButtonPacifier.gameObject.SetActive(true);
        pacifierImage.gameObject.SetActive(true);
    }

    //deactivates all pacifier items on the ui
    public void LockPacifier()
    {
        //price, amount, title, button, image
        pricePacifier.gameObject.SetActive(false);
        amountPacifiers.gameObject.SetActive(false);
        titlePacifier.gameObject.SetActive(false);
        storeButtonPacifier.gameObject.SetActive(false);
        pacifierImage.gameObject.SetActive(false);
    }

    //activates all pencil items on the ui
    public void UnlockPencil()
    {
        //price, amount, title, button, image
        pricePencil.gameObject.SetActive(true);
        amountPencils.gameObject.SetActive(true);
        titlePencil.gameObject.SetActive(true);
        storeButtonPencil.gameObject.SetActive(true);
        pencilImage.gameObject.SetActive(true);
    }

    //deactivates all pencil items on the ui
    public void LockPencil()
    {
        //price, amount, title, button, image
        pricePencil.gameObject.SetActive(false);
        amountPencils.gameObject.SetActive(false);
        titlePencil.gameObject.SetActive(false);
        storeButtonPencil.gameObject.SetActive(false);
        pencilImage.gameObject.SetActive(false);
    }

    //activates all clipboard items on the ui
    public void UnlockClipboard()
    {
        //price, amount, title, button, image
        priceClipboard.gameObject.SetActive(true);
        amountClipboards.gameObject.SetActive(true);
        titleClipboard.gameObject.SetActive(true);
        storeButtonClipboard.gameObject.SetActive(true);
        clipboardImage.gameObject.SetActive(true);
    }

    //deactivates all clipboard items on the ui
    public void LockClipboard()
    {
        //price, amount, title, button, image
        priceClipboard.gameObject.SetActive(false);
        amountClipboards.gameObject.SetActive(false);
        titleClipboard.gameObject.SetActive(false);
        storeButtonClipboard.gameObject.SetActive(false);
        clipboardImage.gameObject.SetActive(false);
    }

    //activates all suit items on the ui
    public void UnlockSuit()
    {
        //price, amount, title, button, image
        priceSuit.gameObject.SetActive(true);
        amountSuits.gameObject.SetActive(true);
        titleSuit.gameObject.SetActive(true);
        storeButtonSuit.gameObject.SetActive(true);
        suitImage.gameObject.SetActive(true);
    }

    //deactivates all suit items on the ui
    public void LockSuit()
    {
        //price, amount, title, button, image
        priceSuit.gameObject.SetActive(false);
        amountSuits.gameObject.SetActive(false);
        titleSuit.gameObject.SetActive(false);
        storeButtonSuit.gameObject.SetActive(false);
        suitImage.gameObject.SetActive(false);
    }

    //activates all phone items on the ui
    public void UnlockPhone()
    {
        //price, amount, title, button, image
        pricePhone.gameObject.SetActive(true);
        amountPhones.gameObject.SetActive(true);
        titlePhone.gameObject.SetActive(true);
        storeButtonPhone.gameObject.SetActive(true);
        phoneImage.gameObject.SetActive(true);
    }

    //deactivates all phone items on the ui
    public void LockPhone()
    {
        //price, amount, title, button, image
        pricePhone.gameObject.SetActive(false);
        amountPhones.gameObject.SetActive(false);
        titlePhone.gameObject.SetActive(false);
        storeButtonPhone.gameObject.SetActive(false);
        phoneImage.gameObject.SetActive(false);
    }

    //activates all computer items on the ui
    public void UnlockComputer()
    {
        //price, amount, title, button, image
        priceComputer.gameObject.SetActive(true);
        amountComputers.gameObject.SetActive(true);
        titleComputer.gameObject.SetActive(true);
        storeButtonComputer.gameObject.SetActive(true);
        computerImage.gameObject.SetActive(true);
    }

    //deactivates all computer items on the ui
    public void LockComputer()
    {
        //price, amount, title, button, image
        priceComputer.gameObject.SetActive(false);
        amountComputers.gameObject.SetActive(false);
        titleComputer.gameObject.SetActive(false);
        storeButtonComputer.gameObject.SetActive(false);
        computerImage.gameObject.SetActive(false);
    }

    //activates all money items on the ui
    public void UnlockMoney()
    {
        //price, amount, title, button, image
        priceMoney.gameObject.SetActive(true);
        amountMoney.gameObject.SetActive(true);
        titleMoney.gameObject.SetActive(true);
        storeButtonMoney.gameObject.SetActive(true);
        moneyImage.gameObject.SetActive(true);
    }

    //deactivates all money items on the ui
    public void LockMoney()
    {
        //price, amount, title, button, image
        priceMoney.gameObject.SetActive(false);
        amountMoney.gameObject.SetActive(false);
        titleMoney.gameObject.SetActive(false);
        storeButtonMoney.gameObject.SetActive(false);
        moneyImage.gameObject.SetActive(false);
    }

    //activates all flag items on the ui
    public void UnlockFlag()
    {
        //price, amount, title, button, image
        priceFlag.gameObject.SetActive(true);
        amountFlag.gameObject.SetActive(true);
        titleFlag.gameObject.SetActive(true);
        storeButtonFlag.gameObject.SetActive(true);
        flagImage.gameObject.SetActive(true);
    }

    //deactivates all flag items on the ui
    public void LockFlag()
    {
        //price, amount, title, button, image
        priceFlag.gameObject.SetActive(false);
        amountFlag.gameObject.SetActive(false);
        titleFlag.gameObject.SetActive(false);
        storeButtonFlag.gameObject.SetActive(false);
        flagImage.gameObject.SetActive(false);
    }

    //activates all cross items on the ui
    public void UnlockCross()
    {
        //price, amount, title, button, image
        priceCross.gameObject.SetActive(true);
        amountCross.gameObject.SetActive(true);
        titleCross.gameObject.SetActive(true);
        storeButtonCross.gameObject.SetActive(true);
        crossImage.gameObject.SetActive(true);
    }

    //deactivates all cross items on the ui
    public void LockCross()
    {
        //price, amount, title, button, image
        priceCross.gameObject.SetActive(false);
        amountCross.gameObject.SetActive(false);
        titleCross.gameObject.SetActive(false);
        storeButtonCross.gameObject.SetActive(false);
        crossImage.gameObject.SetActive(false);
    }

    //activates all halo items on the ui
    public void UnlockHalo()
    {
        //price, amount, title, button, image
        priceHalo.gameObject.SetActive(true);
        amountHalo.gameObject.SetActive(true);
        titleHalo.gameObject.SetActive(true);
        storeButtonHalo.gameObject.SetActive(true);
        haloImage.gameObject.SetActive(true);
    }

    //deactivates all halo items on the ui
    public void LockHalo()
    {
        //price, amount, title, button, image
        priceHalo.gameObject.SetActive(false);
        amountHalo.gameObject.SetActive(false);
        titleHalo.gameObject.SetActive(false);
        storeButtonHalo.gameObject.SetActive(false);
        haloImage.gameObject.SetActive(false);
    }

    //activates all beard items on the ui
    public void UnlockBeard()
    {
        //price, amount, title, button, image
        priceBeard.gameObject.SetActive(true);
        amountBeard.gameObject.SetActive(true);
        titleBeard.gameObject.SetActive(true);
        storeButtonBeard.gameObject.SetActive(true);
        beardImage.gameObject.SetActive(true);
    }

    //deactivates all beard items on the ui
    public void LockBeard()
    {
        //price, amount, title, button, image
        priceBeard.gameObject.SetActive(false);
        amountBeard.gameObject.SetActive(false);
        titleBeard.gameObject.SetActive(false);
        storeButtonBeard.gameObject.SetActive(false);
        beardImage.gameObject.SetActive(false);
    }

    //activates all horn items on the ui
    public void UnlockHorn()
    {
        //price, amount, title, button, image
        priceHorn.gameObject.SetActive(true);
        amountHorn.gameObject.SetActive(true);
        titleHorn.gameObject.SetActive(true);
        storeButtonHorn.gameObject.SetActive(true);
        hornImage.gameObject.SetActive(true);
    }

    //deactivates all horn items on the ui
    public void LockHorn()
    {
        //price, amount, title, button, image
        priceHorn.gameObject.SetActive(false);
        amountHorn.gameObject.SetActive(false);
        titleHorn.gameObject.SetActive(false);
        storeButtonHorn.gameObject.SetActive(false);
        hornImage.gameObject.SetActive(false);
    }

    //activates all tail items on the ui
    public void UnlockTail()
    {
        //price, amount, title, button, image
        priceTail.gameObject.SetActive(true);
        amountTails.gameObject.SetActive(true);
        titleTail.gameObject.SetActive(true);
        storeButtonTails.gameObject.SetActive(true);
        tailImage.gameObject.SetActive(true);
    }

    //deactivates all tail items on the ui
    public void LockTail()
    {
        //price, amount, title, button, image
        priceTail.gameObject.SetActive(false);
        amountTails.gameObject.SetActive(false);
        titleTail.gameObject.SetActive(false);
        storeButtonTails.gameObject.SetActive(false);
        tailImage.gameObject.SetActive(false);
    }

    //activates all baby factory items on the ui
    public void UnlockBabyFactory()
    {
        //price, amount, title, button, image
        priceBabyFactory.gameObject.SetActive(true);
        amountBabyFactory.gameObject.SetActive(true);
        titleBabyFactory.gameObject.SetActive(true);
        storeButtonBabyFactory.gameObject.SetActive(true);
        //babyFactoryImage.gameObject.SetActive(true);
    }

    //deactivates all baby factory items on the ui
    public void LockBabyFactory()
    {
        //price, amount, title, button, image
        priceBabyFactory.gameObject.SetActive(false);
        amountBabyFactory.gameObject.SetActive(false);
        titleBabyFactory.gameObject.SetActive(false);
        storeButtonBabyFactory.gameObject.SetActive(false);
        //babyFactoryImage.gameObject.SetActive(true);
    }

    //activates all pacifier factory items on the ui
    public void UnlockPacifierFactory()
    {
        //price, amount, title, button, image
        pricePacifierFactory.gameObject.SetActive(true);
        amountPacifierFactory.gameObject.SetActive(true);
        titlePacifierFactory.gameObject.SetActive(true);
        storeButtonPacifierFactory.gameObject.SetActive(true);
        //babyFactoryImage.gameObject.SetActive(true);
    }

    //deactivates all pacifier factory items on the ui
    public void LockPacifierFactory()
    {
        //price, amount, title, button, image
        pricePacifierFactory.gameObject.SetActive(false);
        amountPacifierFactory.gameObject.SetActive(false);
        titlePacifierFactory.gameObject.SetActive(false);
        storeButtonPacifierFactory.gameObject.SetActive(false);
        //babyFactoryImage.gameObject.SetActive(true);
    }


    //converts a double to a float
    public static float ToFloat(double d)
    {
        return (float)d;
    }

    //converts double to an int
    public static int ToInt(double d)
    {
        return Mathf.RoundToInt(ToFloat(d));
    }
}
